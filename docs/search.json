[{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":null,"dir":"","previous_headings":"","what":"CLAUDE.md - PerturbPlan Shiny App","title":"CLAUDE.md - PerturbPlan Shiny App","text":"file provides guidance Claude Code working PerturbPlan Shiny application built using Golem framework.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"CLAUDE.md - PerturbPlan Shiny App","text":"PerturbPlanApp production-ready Golem-based Shiny application constraint-driven experimental design CRISPR perturb-seq experiments. provides sophisticated interface real-time power analysis experimental optimization full perturbplan package integration.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"golem-framework-structure","dir":"","previous_headings":"Architecture","what":"Golem Framework Structure","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Main App Files: R/app_*.R - Core application structure Modules: R/mod_*.R - Modular Shiny components Utilities: R/fct_*.R R/utils_*.R - Helper functions Assets: inst/app/www/ - CSS, JS, images Configuration: inst/golem-config.yml - App configuration","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"core-architecture-clean-4-module-design","dir":"","previous_headings":"Architecture","what":"Core Architecture: Clean 4-Module Design","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Production-Ready Analysis Pipeline:","code":"Input Collection → Analysis Engine → Plotting Engine → Results Display      ↓                    ↓              ↓                ↓ mod_sidebar    →  mod_analysis_engine → mod_plotting_engine → mod_results_display"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"key-modules","dir":"","previous_headings":"Architecture > Core Architecture: Clean 4-Module Design","what":"Key Modules:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Integrates parameter modules (design_options, experimental_setup, analysis_choices, effect_sizes) Centralized configuration management parameter translation Real-time validation business rule enforcement REAL MODE: Full perturbplan package integration (DEFAULT) Placeholder Mode: Available via environment variable development Three sophisticated analysis engines: Standard, Cost Minimization, Constrained Optimization Converts analysis data Plotly interactive plots Handles 11 workflow scenarios specialized plot types Real-time plot generation performance optimization Dynamic results presentation based analysis completion Error handling loading states Export functionality analysis results","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"constraint-driven-workflow","dir":"","previous_headings":"Key Design Principles","what":"Constraint-Driven Workflow","title":"CLAUDE.md - PerturbPlan Shiny App","text":"app follows constraint-driven design users specify: 1. Optimization objective: Power-Power + cost considerations 2. Minimization target: parameter optimize (cells, reads, cost, TPM, fold change) 3. Parameter controls: parameters vary, fixed, minimized","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"power-only-optimization-5-workflows","dir":"","previous_headings":"Key Design Principles > 11 Supported Workflows","what":"Power-Only Optimization (5 workflows)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Workflows 1-4: Single parameter optimization (cells, reads, TPM, fold change) Workflow 5: Total cost minimization cells + reads varying","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"power--cost-optimization-6-workflows","dir":"","previous_headings":"Key Design Principles > 11 Supported Workflows","what":"Power + Cost Optimization (6 workflows)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Workflows 6-8: TPM minimization different parameter combinations Workflows 9-11: Fold change minimization different parameter combinations","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"parameter-control-logic","dir":"","previous_headings":"Key Design Principles","what":"Parameter Control Logic","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Business Rules: - one parameter can “Minimizing” status time - parameter selected minimization target, ’s auto-set “Minimizing” grayed - parameters grayed one “Minimizing” - Fixed parameters provide constraints (2 values ) - Varying parameters interact minimizing parameter optimization","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-current-state-fully-operational","dir":"","previous_headings":"Production Status","what":"✅ CURRENT STATE: FULLY OPERATIONAL","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Real Analysis Integration Complete: - 118 tests passing ✔️ (comprehensive test coverage) - Full perturbplan integration ✔️ (real mathematical optimization) - Production-ready performance ✔️ (cached results, optimized reactivity) - 11 workflows implemented ✔️ (power-power+cost scenarios)","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"golem-development-commands-current-best-practices","dir":"","previous_headings":"Production Status","what":"Golem Development Commands (Current Best Practices)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Primary development workflow golem::run_dev()              # Launch app in production mode (real analysis) devtools::test()              # Run all tests (118 tests should pass) devtools::check()             # Full package check (should show 0 errors/warnings)  # Documentation and dependencies devtools::document()          # Update NAMESPACE and man files golem::install_dev_deps()     # Install all development dependencies  # For new modules (ALWAYS use Golem): golem::add_module(name = \"module_name\", with_test = TRUE, open = FALSE)  # For new assets (ALWAYS use Golem): golem::add_css_file(\"filename\")      # Add CSS files golem::add_js_file(\"filename\")       # Add JavaScript files  # For new dependencies (ALWAYS use usethis): usethis::use_package(\"package_name\") # Add to DESCRIPTION"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"analysis-mode-control","dir":"","previous_headings":"Production Status","what":"Analysis Mode Control","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# PRODUCTION MODE (DEFAULT): Real perturbplan analysis # Set in fct_analysis_config.R line 37: return(FALSE)  # DEVELOPMENT MODE: Placeholder analysis (if needed) Sys.setenv(PERTURBPLAN_USE_PLACEHOLDER = \"true\") golem::run_dev()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_️-critical-golem-rules","dir":"","previous_headings":"Production Status","what":"⚠️ Critical Golem Rules","title":"CLAUDE.md - PerturbPlan Shiny App","text":"NEVER (violations Golem best practices): ALWAYS (proper Golem practices):","code":"# ❌ Manual module creation # Create files manually in R/ directory  # ❌ Manual asset inclusion   tags$script(src = \"file.js\") tags$link(rel = \"stylesheet\", href = \"file.css\")  # ❌ Missing dependency declarations # Using package::function without declaring in DESCRIPTION # ✅ Proper module creation golem::add_module(name = \"module_name\", with_test = TRUE)  # ✅ Proper asset management # Assets automatically bundled by bundle_resources() in golem_add_external_resources()  # ✅ Proper dependency management   usethis::use_package(\"package_name\")     # Adds to DESCRIPTION #' @importFrom package function          # Adds to NAMESPACE via devtools::document()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"file-organization","dir":"","previous_headings":"Production Status","what":"File Organization","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"R/ ├── app_*.R           # Core Golem app files ├── mod_*.R           # Shiny modules (our main focus) ├── fct_*.R           # Business logic functions ├── utils_*.R         # Utility functions └── run_app.R         # App launcher  inst/app/www/ ├── custom.css        # Custom styling (preserve visual continuity) ├── custom.js         # JavaScript enhancements └── favicon.ico       # App icon  dev/ ├── 01_start.R        # Initial setup and dependencies ├── 02_dev.R          # Development helpers └── 03_deploy.R       # Deployment configuration"},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_1-standard-power-analysis-generate_real_analysis","dir":"","previous_headings":"perturbplan Package Integration ✅ COMPLETE > Real Analysis Engines Working:","what":"1. Standard Power Analysis (generate_real_analysis)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Full integration with perturbplan::cost_power_computation results <- perturbplan::cost_power_computation(   minimizing_variable = \"TPM_threshold\",  # or \"minimum_fold_change\"   fixed_variable = list(minimum_fold_change = 0.8),   baseline_expression_stats = pilot_data$baseline_expression_stats,   library_parameters = pilot_data$library_parameters,   # ... all other parameters mapped from UI )"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_2-cost-minimization-analysis-perform_cost_minimization_analysis","dir":"","previous_headings":"perturbplan Package Integration ✅ COMPLETE > Real Analysis Engines Working:","what":"2. Cost Minimization Analysis (perform_cost_minimization_analysis)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Workflow 5: Total cost minimization with power constraints # Uses perturbplan cost optimization functions # Returns interactive cost-power tradeoff visualizations"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_3-constrained-minimization-analysis-perform_constrained_minimization_analysis","dir":"","previous_headings":"perturbplan Package Integration ✅ COMPLETE > Real Analysis Engines Working:","what":"3. Constrained Minimization Analysis (perform_constrained_minimization_analysis)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Workflows 10-11: TPM/FC minimization with cost+power constraints   # Advanced multi-parameter optimization # Real mathematical convergence with constraint handling"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"parameter-translation-system","dir":"","previous_headings":"perturbplan Package Integration ✅ COMPLETE","what":"Parameter Translation System:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"UI Layer: TPM_threshold, cells_per_target, mapped_reads_per_cell Backend Layer: Automatic translation perturbplan-compatible parameters Column Standardization: raw_reads_per_cell → sequenced_reads_per_cell","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"critical-always-use-golem-commands-for-module-creation","dir":"","previous_headings":"Module Development Guidelines","what":"CRITICAL: Always Use Golem Commands for Module Creation","title":"CLAUDE.md - PerturbPlan Shiny App","text":"IMPORTANT: modules must created using proper Golem commands. Never manually create module files.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"creating-new-modules","dir":"","previous_headings":"Module Development Guidelines > CRITICAL: Always Use Golem Commands for Module Creation","what":"Creating New Modules","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Always use this command to create new modules golem::add_module(name = \"module_name\", with_test = TRUE)  # Examples: golem::add_module(name = \"cost_info\", with_test = TRUE) golem::add_module(name = \"results_display\", with_test = TRUE) golem::add_module(name = \"data_export\", with_test = TRUE)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"why-use-golem-commands","dir":"","previous_headings":"Module Development Guidelines > CRITICAL: Always Use Golem Commands for Module Creation","what":"Why Use Golem Commands?","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Proper File Structure: Creates files correct locations proper naming Template Generation: Provides proper roxygen documentation templates Test Integration: Automatically creates corresponding test files Import Management: Ensures proper @importFrom declarations Consistency: Maintains consistent code structure across project Documentation: Updates package documentation appropriately","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"module-creation-workflow","dir":"","previous_headings":"Module Development Guidelines > CRITICAL: Always Use Golem Commands for Module Creation","what":"Module Creation Workflow","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Step 1: Create the module using Golem golem::add_module(name = \"your_module\", with_test = TRUE)  # Step 2: Document the package devtools::document()  # Step 3: Implement the module logic # Edit R/mod_your_module.R with proper business logic  # Step 4: Write comprehensive tests # Edit tests/testthat/test-mod_your_module.R  # Step 5: Test and validate devtools::test() devtools::check()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"module-file-locations","dir":"","previous_headings":"Module Development Guidelines > CRITICAL: Always Use Golem Commands for Module Creation","what":"Module File Locations","title":"CLAUDE.md - PerturbPlan Shiny App","text":"using golem::add_module(), files created : - Module File: R/mod_[name].R - Test File: tests/testthat/test-mod_[name].R","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"golem-module-template-structure","dir":"","previous_headings":"Module Development Guidelines > CRITICAL: Always Use Golem Commands for Module Creation","what":"Golem Module Template Structure","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Generated by golem::add_module(name = \"example\", with_test = TRUE)  #' example UI Function #' #' @description A shiny Module. #' #' @param id,input,output,session Internal parameters for {shiny}. #' #' @noRd  #' #' @importFrom shiny NS tagList  mod_example_ui <- function(id){   ns <- NS(id)   tagList(     # Module UI logic here   ) }      #' example Server Functions #' #' @noRd  mod_example_server <- function(id){   moduleServer( id, function(input, output, session){     ns <- session$ns     # Module server logic here   }) }"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"mod_design_options-structure","dir":"","previous_headings":"Module Development Guidelines","what":"mod_design_options Structure","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# UI function with 3 main sections mod_design_options_ui <- function(id) {   ns <- NS(id)   tagList(     # Section 1: Optimization Framework       radioButtons(ns(\"optimization_type\"), ...),          # Section 2: Minimization Target     checkboxGroupInput(ns(\"minimization_target\"), ...),          # Section 3: Parameter Control Matrix     # Dynamic UI with Varying/Fixed/Minimizing radio buttons   ) }  # Server function with reactive logic mod_design_options_server <- function(id) {   moduleServer(id, function(input, output, session) {     # Business logic for parameter control     # Auto-update \"Minimizing\" status     # Return design configuration reactive   }) }"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"visual-continuity-requirements","dir":"","previous_headings":"Module Development Guidelines","what":"Visual Continuity Requirements","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Preserve color scheme original app Reuse UI components styling patterns Maintain responsive layouts Keep familiar interaction patterns Copy CSS/JS original app:","code":"cp ../perturbplan/inst/shiny/ui/* inst/app/www/"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"variable-naming-unification-phase-25--complete","dir":"","previous_headings":"Advanced Features Completed ✅","what":"Variable Naming Unification (Phase 2.5) ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Achievement: Complete 5-layer naming standardization documented R/naming_standards.R: Result: Zero parameter naming confusion, seamless perturbplan integration.","code":"# Reads Parameter: Complex 5-layer transformation UI Input:     \"mapped_reads_per_cell\"           # User's mental model Config:       \"mapped_reads_fixed\"              # Module parameter passing   API Input:    \"reads_per_cell\"                  # perturbplan expects API Output:   \"raw_reads_per_cell\"              # perturbplan returns Internal:     \"sequenced_reads_per_cell\"        # Standard for processing/display"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"component-library-architecture--complete","dir":"","previous_headings":"Advanced Features Completed ✅","what":"Component Library Architecture ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"283 semantic components replacing inline styles Responsive design system (variables.css, layout.css, components.css) Consistent UI patterns across 11 workflow scenarios Production-ready styling proper CSS organization","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"comprehensive-testing--complete","dir":"","previous_headings":"Advanced Features Completed ✅","what":"Comprehensive Testing ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"devtools::test()     # 118 tests pass devtools::check()    # 0 errors, 0 warnings"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"performance-optimization--complete","dir":"","previous_headings":"Advanced Features Completed ✅","what":"Performance Optimization ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Cached analysis results - prevents unnecessary recalculation Intelligent reactivity - updates sidebar changes Background analysis - non-blocking UI computation Error boundary - graceful degradation analysis failures","code":""},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"phase-1-foundation--complete","dir":"","previous_headings":"Development Evolution: From Prototype to Production > ✅ COMPLETE: All Development Phases Finished","what":"Phase 1: Foundation ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ Golem-compliant module architecture ✅ Constraint-driven UI business logic ✅ Complete parameter control system ✅ Full test coverage dependency management","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"phase-2-visualization-engine--complete","dir":"","previous_headings":"Development Evolution: From Prototype to Production > ✅ COMPLETE: All Development Phases Finished","what":"Phase 2: Visualization Engine ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ mod_plotting_engine: Interactive Plotly visualizations ✅ 11 workflow scenarios: plot types implemented ✅ mod_results_display: Dynamic results presentation ✅ Export functionality: Analysis results download","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"phase-25-variable-naming-unification--complete","dir":"","previous_headings":"Development Evolution: From Prototype to Production > ✅ COMPLETE: All Development Phases Finished","what":"Phase 2.5: Variable Naming Unification ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ 5-layer naming architecture: UI → Config → API → Processing → Display ✅ Zero naming conflicts: Complete parameter standardization ✅ Component library integration: 283 semantic components ✅ Column access optimization: Warning-free data processing","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"phase-3-real-analysis-integration--complete","dir":"","previous_headings":"Development Evolution: From Prototype to Production > ✅ COMPLETE: All Development Phases Finished","what":"Phase 3: Real Analysis Integration ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ Full perturbplan integration: cost_power_computation, cost optimization, constrained minimization ✅ Three analysis engines: Standard, Cost, Constrained scenarios ✅ Parameter translation: Seamless UI--perturbplan mapping ✅ Performance optimization: Caching, intelligent reactivity","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"phase-4-production-readiness--complete","dir":"","previous_headings":"Development Evolution: From Prototype to Production > ✅ COMPLETE: All Development Phases Finished","what":"Phase 4: Production Readiness ✅ COMPLETE","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ 118 tests passing: Comprehensive test coverage ✅ Error handling: Graceful degradation user feedback ✅ Mode switching: Development/production analysis modes ✅ Performance monitoring: Optimized real-time analysis","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-current-state-production-ready-application","dir":"","previous_headings":"Development Evolution: From Prototype to Production","what":"🎯 CURRENT STATE: PRODUCTION-READY APPLICATION","title":"CLAUDE.md - PerturbPlan Shiny App","text":"app now fully operational analysis platform real mathematical optimization, prototype.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"golem-configyml-structure","dir":"","previous_headings":"Configuration Management","what":"golem-config.yml Structure","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"default:   golem_name: perturbplanApp   golem_version: 0.0.1   app_prod: no    production:   app_prod: yes    dev:   golem_wd: !expr here::here()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"environment-specific-settings","dir":"","previous_headings":"Configuration Management","what":"Environment-Specific Settings","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Development: Full debugging, reload capabilities Production: Optimized performance, error handling Testing: Mock data, simplified workflows","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"module-testing","dir":"","previous_headings":"Testing Strategy","what":"Module Testing","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Test individual modules testServer(mod_design_options_server, {   # Test parameter control logic   # Test workflow detection   # Test design config output })"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"integration-testing","dir":"","previous_headings":"Testing Strategy","what":"Integration Testing","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Test complete workflows # Test data flow between modules # Test edge cases and error handling"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"efficient-reactive-design","dir":"","previous_headings":"Performance Considerations","what":"Efficient Reactive Design","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Use req() input validation Implement debounce() expensive calculations Cache results appropriate Lazy loading large datasets","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"memory-management","dir":"","previous_headings":"Performance Considerations","what":"Memory Management","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Clean large objects needed Use data.table efficient data manipulation Stream large downloads rather loading memory","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"preparation","dir":"","previous_headings":"Deployment","what":"Preparation","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Build and check devtools::check()  # Create deployment bundle golem::add_dockerfile()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"hosting-options","dir":"","previous_headings":"Deployment","what":"Hosting Options","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Shinyapps.io: Quick deployment testing Docker: Containerized deployment Shiny Server: Self-hosted options","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"module-communication","dir":"","previous_headings":"Common Development Patterns","what":"Module Communication","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Pass data between modules using reactive values design_config <- mod_design_options_server(\"design\") mod_analysis_results_server(\"analysis\", design_config)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"dynamic-ui-updates","dir":"","previous_headings":"Common Development Patterns","what":"Dynamic UI Updates","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Update UI based on user selections observeEvent(input$optimization_type, {   updateCheckboxGroupInput(...) })"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"error-handling","dir":"","previous_headings":"Common Development Patterns","what":"Error Handling","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"# Graceful error handling with user feedback tryCatch({   # Analysis logic }, error = function(e) {   showNotification(\"Error: Please check your inputs\", type = \"error\") })"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"commit-strategy","dir":"","previous_headings":"Git Workflow","what":"Commit Strategy","title":"CLAUDE.md - PerturbPlan Shiny App","text":"committing changes: - Complete commits: Ensure app working state - Clear messages: Describe module/feature added - Test commit: Verify app loads basic functionality works","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"branch-management","dir":"","previous_headings":"Git Workflow","what":"Branch Management","title":"CLAUDE.md - PerturbPlan Shiny App","text":"main: Stable releases dev: Development work feature/*: Specific feature development","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"modules","dir":"","previous_headings":"File Naming Conventions","what":"Modules","title":"CLAUDE.md - PerturbPlan Shiny App","text":"mod_design_options.R - Main design configuration mod_experimental_setup.R - Data upload parameters mod_analysis_results.R - Results visualization mod_results_export.R - Export functionality","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"functions","dir":"","previous_headings":"File Naming Conventions","what":"Functions","title":"CLAUDE.md - PerturbPlan Shiny App","text":"fct_workflow_detection.R - Business logic detecting user workflow fct_parameter_validation.R - Input validation functions fct_plot_generation.R - Plot creation helpers","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"utilities","dir":"","previous_headings":"File Naming Conventions","what":"Utilities","title":"CLAUDE.md - PerturbPlan Shiny App","text":"utils_ui.R - UI helper functions utils_data.R - Data processing utilities utils_validation.R - Input validation helpers","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"parameter-naming-convention","dir":"","previous_headings":"","what":"Parameter Naming Convention","title":"CLAUDE.md - PerturbPlan Shiny App","text":"IMPORTANT: Use tpm_threshold instead tmp_threshold everywhere package. function parameters use tpm_threshold variable names use tpm_threshold documentation reference tpm_threshold UI inputs use \"tpm_threshold\" input ID ensures consistency across entire codebase avoids confusion “TPM” (Transcripts Per Million) “tmp” (temporary).","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"common-typos-to-avoid","dir":"","previous_headings":"Parameter Naming Convention","what":"Common Typos to Avoid","title":"CLAUDE.md - PerturbPlan Shiny App","text":"tpm_threshold vs tmp_threshold: Always use tpm_threshold (Transcripts Per Million), tmp_threshold (temporary) Parameter consistency: adding parameters functions, double-check spelling matches existing usage Function signatures: Ensure parameter names match function definitions calls Careful attention existing code: modifying existing functions, preserve existing parameter names exactly ","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"module-documentation","dir":"","previous_headings":"Documentation Requirements","what":"Module Documentation","title":"CLAUDE.md - PerturbPlan Shiny App","text":"module include: - Purpose: module - Inputs: Expected input parameters - Outputs: module returns - Business Logic: Key decision points rules","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"function-documentation","dir":"","previous_headings":"Documentation Requirements","what":"Function Documentation","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Use roxygen2 functions:","code":"#' Design Options Module UI #' #' @param id Module namespace ID #' @return Shiny UI elements #' @export"},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"current-project-sidebar-base--slider-override-architecture","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation","what":"Current Project: Sidebar-Base + Slider-Override Architecture","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Vision: Implement dual-workflow system : 1. Phase 1 (Sidebar Mode): Users configure parameters via sidebar → Plan button → Analysis → Results 2. Phase 2 (Slider Mode): first results, sidebar freezes sliders appear real-time parameter overrides","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"architecture-overview","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > Implementation Status: Phase 1.1 COMPLETE ✅","what":"Architecture Overview:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"Phase 1: Sidebar (Complete Config) → Plan → Analysis → Results Phase 2: Sidebar (Frozen) + Sliders (Override Subset) → Real-time Analysis"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"key-design-decisions","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > Implementation Status: Phase 1.1 COMPLETE ✅","what":"Key Design Decisions:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Sidebar-base: Sidebar contains complete parameter set, remains master configuration source Slider-override: Sliders contain subset parameters, provide real-time overrides Parameter Source Manager: Central coordination hub managing sidebar-base + slider-override logic App State Management: Global reactiveValues phase tracking UI state control","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-11-app-state-foundation-complete","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"✅ Phase 1.1: App State Foundation (COMPLETE)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"File: R/app_server.R:19-25 Implementation: Added global app state management","code":"app_state <- reactiveValues(   phase = 1,                    # 1 = sidebar mode, 2 = slider mode   sidebar_frozen = FALSE,       # Are sidebar inputs disabled?   sliders_visible = FALSE,      # Should sliders be shown in results?   initial_config_snapshot = NULL,  # Frozen sidebar config for Phase 2   plan_button_text = \"Plan\"     # Button text: \"Plan\" or \"Restart\" )"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-12-parameter-source-manager-next","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"🔄 Phase 1.2: Parameter Source Manager (NEXT)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Create central parameter coordination without changing current behavior Implementation: Pass-mode sidebar values flow directly analysis File: New R/mod_parameter_source_manager.R","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-2-integration-wiring","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 2: Integration Wiring","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Connect parameter source manager analysis engine without behavior changes Implementation: Update analysis engine accept parameter_source_manager input","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-3-planrestart-button-logic","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 3: Plan/Restart Button Logic","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Button switches “Plan” “Restart” based app_state$phase Implementation: Dynamic button text phase transition logic","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-4-sidebar-freezingunfreezing","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 4: Sidebar Freezing/Unfreezing","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Disable sidebar inputs Phase 2, enable Phase 1 Implementation: Conditional disabled attributes based app_state$sidebar_frozen","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-5-conditional-slider-visibility","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 5: Conditional Slider Visibility","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Show sliders Phase 2 results panel Implementation: Conditional UI rendering based app_state$sliders_visible","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-6-real-time-slider-overrides","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 6: Real-time Slider Overrides","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Sliders override sidebar parameters trigger immediate analysis Implementation: Parameter source manager priority logic (slider > sidebar)","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"id_-phase-7-performance--polish","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > 7-Phase Implementation Plan:","what":"📋 Phase 7: Performance & Polish","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Goal: Optimize reactivity, add smooth transitions, error handling Implementation: Debouncing, caching, UI animations","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"parameter-flow-target-state","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > Technical Architecture:","what":"Parameter Flow (Target State):","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"Sidebar Parameters (Complete Set)        ↓ Parameter Source Manager        ↓ (Phase 1: sidebar-only)        ↓ (Phase 2: sidebar + slider overrides)        ↓ Analysis Engine        ↓ Results Display (+ Sliders in Phase 2)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"app-state-transitions","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation > Technical Architecture:","what":"App State Transitions:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"","code":"Phase 1 (Initial): - sidebar_frozen = FALSE - sliders_visible = FALSE - plan_button_text = \"Plan\"  Phase 2 (Post-Plan): - sidebar_frozen = TRUE - sliders_visible = TRUE - plan_button_text = \"Restart\""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"progress-tracking","dir":"","previous_headings":"🚧 ACTIVE DEVELOPMENT: Dual-Workflow Implementation","what":"Progress Tracking:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Branch: intermediate-rebuild Last Commit: Phase 1.1 app_state foundation complete Test Status: functionality preserved, zero regressions Next Step: Phase 1.2 parameter source manager creation","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"current-development-tasks-active","dir":"","previous_headings":"Known Issues and TODOs","what":"Current Development Tasks (Active)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Phase 1.2: Create parameter source manager pass-mode Phase 2: Wire integration without behavior changes Phase 3-7: Sequential implementation dual-workflow features","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"future-enhancement-opportunities-post-dual-workflow","dir":"","previous_headings":"Known Issues and TODOs","what":"Future Enhancement Opportunities (Post-Dual-Workflow)","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Advanced Visualization: Additional plot types (heatmaps, 3D surfaces) Export Formats: PDF reports, PowerPoint presentations Batch Analysis: Multiple experiment comparison API Integration: RESTful API programmatic access","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"development-milestones","dir":"","previous_headings":"Success Metrics","what":"Development Milestones","title":"CLAUDE.md - PerturbPlan Shiny App","text":"11 workflows can configured UI Parameter control panel behaves according business rules Interactive visualizations display correctly workflow Integration perturbplan package functions works Visual continuity original app maintained Real mathematical optimization implemented Production-ready performance achieved Comprehensive error handling completed","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"user-experience-goals--achieved","dir":"","previous_headings":"Success Metrics","what":"User Experience Goals ✅ ACHIEVED","title":"CLAUDE.md - PerturbPlan Shiny App","text":"✅ Real-time analysis results - Actual perturbplan optimization ✅ Intelligent workflow guidance - Constraint-driven parameter control ✅ Intuitive parameter interface - Progressive disclosure business rules ✅ Comprehensive results export - Interactive plots analysis data ✅ Production performance - Cached results, optimized reactivity ✅ Error resilience - Graceful degradation user feedback","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"parameter-naming---fully-resolved-","dir":"","previous_headings":"","what":"PARAMETER NAMING - FULLY RESOLVED ✅","title":"CLAUDE.md - PerturbPlan Shiny App","text":"COMPLETE: Parameter naming comprehensively standardized Phase 2.5.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"current-standard-all-implemented","dir":"","previous_headings":"PARAMETER NAMING - FULLY RESOLVED ✅","what":"Current Standard (ALL IMPLEMENTED):","title":"CLAUDE.md - PerturbPlan Shiny App","text":"UI Layer: TPM_threshold (user-facing inputs) Config Layer: TPM_threshold_fixed (inter-module communication) API Layer: Automatic translation perturbplan-compatible parameters Processing Layer: sequenced_reads_per_cell (internal calculations) Display Layer: “TPM Threshold” (user-facing labels)","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/CLAUDE.html","id":"translation-handled-automatically","dir":"","previous_headings":"PARAMETER NAMING - FULLY RESOLVED ✅","what":"Translation Handled Automatically:","title":"CLAUDE.md - PerturbPlan Shiny App","text":"Zero outstanding parameter naming issues. System production-ready.","code":"# Centralized parameter translation in mod_analysis_engine.R lines 118-126 # UI parameter names → perturbplan function parameters # No manual intervention needed - system handles all conversions"},{"path":"https://katsevich-lab.github.io/perturbplanapp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ziang Niu, Yihui , Eugene Katsevich Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"assay-type","dir":"Articles","previous_headings":"Design problems > Steps to specify a design problem","what":"1. Assay type","title":"PerturbPlan App Documentation","text":"first step choose assay type: Perturb-seq TAP-seq. PerturbPlan currently supports set design problems Perturb-seq TAP-seq. particular, PerturbPlan currently support TAP-seq-specific design problems, choosing set genes target. choice assay type primarily impacts choice reference expression data quantification gene expression (see ).","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"optimization-constraints","dir":"Articles","previous_headings":"Design problems > Steps to specify a design problem","what":"2. Optimization constraints","title":"PerturbPlan App Documentation","text":"PerturbPlan facilitates constraining power cost experiment. Power. target power experiment often set 80% (PerturbPlan default), means one expects detect least 80% true perturbation-gene pairs. Power impacted several choices; example, power grows profiling larger number cells sequencing larger number reads per cell. Cost. total cost computed sum library preparation cost sequencing cost. costs determined depends library preparation sequencing platforms used. maintain flexibility across platforms, PerturbPlan quantifies library preparation cost terms cost/cell sequencing cost terms cost/million reads. defaults built PerturbPlan based cost 2025 10X Genomics v4 3’ library preparation Novaseq X 25B.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"minimization-targets","dir":"Articles","previous_headings":"Design problems > Steps to specify a design problem","what":"3. Minimization targets","title":"PerturbPlan App Documentation","text":"Given power /cost constraints, PerturbPlan supports minimization five parameters: Cells per target: average number cells receiving CRISPR perturbations given target. Increasing number cells per target increases power, also increases cost. Minimizing parameter can used proxy minimizing cost (often constraining power). Reads per cell: average number sequenced reads per cell. Increasing number reads per cell increases power, also increases cost. Minimizing parameter can used proxy minimizing cost (often constraining power). Expression threshold: Even experimentalist mind concrete set perturbation-gene pairs test association, pairs involving lowly expressed genes can drag power analysis. reason, minimum gene expression threshold can applied filter set pairs prior testing. Minimizing threshold means include many genes possible analysis, still achieving target power. Fold change: fold change measures size effect perturbation gene’s expression (see precise definition). Minimizing fold change means able detect subtle effects, still achieving target power. Total cost: Note cost can constraint () variable minimized experimental parameters, subject power constraint.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"other-varying-parameters","dir":"Articles","previous_headings":"Design problems > Steps to specify a design problem","what":"4. Other varying parameters","title":"PerturbPlan App Documentation","text":"design problems, parameters addition minimized allowed vary. include cells/target reads/cell; see detail.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"supported-design-problems","dir":"Articles","previous_headings":"Design problems","what":"Supported design problems","title":"PerturbPlan App Documentation","text":"PerturbPlan requires power constraint design problems, allows choosing whether include cost constraint well. supported combinations optimization constraints, minimization targets, varying parameters presented table . Design problems 1-4 simplest: determine minimum value one parameter required attain desired power, holding parameters fixed. Design problem 5 allows cells/target reads/cell vary, finding lowest-cost combination achieve target power. remainder design problems involve constraining cost power, allowing minimization either expression threshold fold change, allowing one cells/target reads/cell vary.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"design-parameters","dir":"Articles","previous_headings":"","what":"Design parameters","title":"PerturbPlan App Documentation","text":"selected design problem, need specify design parameters define screen. parameters grouped four collapsible sections: experimental choices (data collected), analysis choices (data analyzed), effect sizes (strength biological effects wish detect), advanced settings (optional additional settings).","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"reference-expression-data","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Reference expression data","title":"PerturbPlan App Documentation","text":"Reference expression data biological system interest needed compute power. data include baseline mean expressions expressed genes (Perturb-seq) targeted genes (TAP-seq), fitted sequencing saturation curve, mapping efficiency (defined ). Reference expression data can either built-custom: Built-: PerturbPlan ships reference expression data six cell types commonly used perturbation screens (K562, A549, THP1, CD8+ T, iPSC, iPSC-derived neurons), documented . Consider using planning Perturb-seq experiment cell type falls one categories. Custom: Custom reference data can uploaded PerturbPlan app. required format means process data format documented . Use custom reference data planning Perturb-seq experiment cell type covered built-data, planning TAP-seq experiment. Since TAP-seq experiment comes unique set targeted genes, PerturbPlan include built-TAP-seq reference data. wish try TAP-seq functionality app, may download sample reference expression dataset, documented .","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"multiplicity-of-infection-moi","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Multiplicity of infection (MOI)","title":"PerturbPlan App Documentation","text":"average number gRNA-carrying lentiviral particles infect single cell.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"number-of-perturbation-targets","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Number of perturbation targets","title":"PerturbPlan App Documentation","text":"number genomic elements (commonly, genes enhancers) plan perturb screen. confused number gene targeted sequencing TAP-seq experiment.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"grnas-per-target","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"gRNAs per target","title":"PerturbPlan App Documentation","text":"number gRNAs designed perturb target. multiple gRNAs per target improves robustness ineffective guides improves power averaging noisy gRNA effects.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"number-of-non-targeting-grnas","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Number of non-targeting gRNAs","title":"PerturbPlan App Documentation","text":"Non-targeting gRNAs control gRNAs target genomic element. used form control group cells (low-MOI screens) check calibration (screens). effect number non-targeting gRNAs power usually small, utility purposes. recommended include tens even hundreds non-targeting gRNAs perturbation screens.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"cells-per-target","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Cells per target","title":"PerturbPlan App Documentation","text":"average number cells receiving CRISPR perturbations given target, equal total number cells profiled divided number perturbation targets.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"reads-per-cell","dir":"Articles","previous_headings":"Design parameters > Experimental choices","what":"Reads per cell:","title":"PerturbPlan App Documentation","text":"average number sequenced reads per cell. sequenced reads gives rise unique molecular identifiers (UMIs) per cell, leads less noisy gene expressions therefore higher power.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"perturbation-gene-pairs-to-analyze","dir":"Articles","previous_headings":"Design parameters > Analysis Choices","what":"Perturbation-gene pairs to analyze","title":"PerturbPlan App Documentation","text":"set perturbation-gene pairs plan test association. pairs can specified one two ways: Random pairing: yet decided perturbation-gene pairs analyze, can choose pair perturbations genes random, subject constraint genes involved survive expression threshold. Custom pairing: decided perturbation-gene pairs analyze, can upload set pairs PerturbPlan RDS file containing data frame two columns named grna_target (identifier genomic element targeted) response_id (ENSG ID gene).","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"test-sidedness","dir":"Articles","previous_headings":"Design parameters > Analysis Choices","what":"Test sidedness","title":"PerturbPlan App Documentation","text":"expected direction perturbation effect. options Left: perturbing genomic element expected -regulate gene tested . Right: perturbing genomic element expected -regulate gene tested . : direction effect unknown.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"expression-threshold","dir":"Articles","previous_headings":"Design parameters > Analysis Choices","what":"Expression threshold","title":"PerturbPlan App Documentation","text":"relevant quantification gene expression depends whether Perturb-seq TAP-seq planned: Perturb-seq: Expressions obtained transcriptome-wide RNA-seq commonly measured units transcripts per million (TPM), expected number UMIs coming given gene among million UMIs captured cell. TAP-seq: Measuring expression terms TPMs less meaningful TAP-seq experiment, expression measured smaller number genes. interpretable substitute TPM, quantify TAP-seq gene expression terms UMIs/cell saturation, expected number UMIs coming given gene cell sequenced saturation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"effect-sizes","dir":"Articles","previous_headings":"Design parameters","what":"Effect sizes","title":"PerturbPlan App Documentation","text":"following two parameters relevant defining biological effects wish detect.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"fold-change","dir":"Articles","previous_headings":"Design parameters > Effect sizes","what":"Fold change","title":"PerturbPlan App Documentation","text":"fold change multiplicative change mean gene expression induced perturbation: Fold change = 1.0: effect (null hypothesis). Fold change < 1.0: Negative/inhibitory effect (e.g., 0.8 = 20% decrease expression). Fold change > 1.0: Positive/activating effect (e.g., 1.5 = 50% increase expression). conservative power estimate, specify weakest effect size interest.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"proportion-of-non-null-pairs","dir":"Articles","previous_headings":"Design parameters > Effect sizes","what":"Proportion of non-null pairs","title":"PerturbPlan App Documentation","text":"fraction tested perturbation-gene pairs expected signal least strong weakest effect size interest. Higher proportions non-null pairs increase power reducing impact multiple testing corrections. Estimating parameter perturbation screens remains open question, default value 0.01 reasonable starting point.","code":""},{"path":[]},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"grna-variability","dir":"Articles","previous_headings":"Design parameters > Advanced settings","what":"gRNA variability","title":"PerturbPlan App Documentation","text":"variance per-gRNA fold changes target. fold change given perturbation-gene pair β\\beta gRNA variability σ2\\sigma^2, fold change induced gRNA modeled N(β,σ2)N(\\beta, \\sigma^2).","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"mapping-efficiency","dir":"Articles","previous_headings":"Design parameters > Advanced settings","what":"Mapping efficiency","title":"PerturbPlan App Documentation","text":"fraction sequencing reads map confidently genes interest. quantity derived reference expression data, may changed manually desired. mapping efficiency depends type experiment planned: Perturb-seq: Perturb-seq, genes interest, mapping efficiency proportion reads mapping gene. Perturb-seq mapping efficiencies often fall range 0.65-0.75. TAP-seq: Imperfect gene-specific primers can hybridize transcripts coming genes targeted. Therefore, proportion reads confidently mapped genome map target genes, making TAP-seq mapping efficiencies generally lower Perturb-seq. example, mapping efficiency recent Ray et al. (2025) TAP-seq dataset 0.35.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"control-group","dir":"Articles","previous_headings":"Design parameters > Advanced settings","what":"Control group","title":"PerturbPlan App Documentation","text":"strategy used construct control cells testing perturbation effects. Non-targeting cells: Cells receive non-targeting gRNAs. default choice low-MOI screens (MOI > 1). Complement cells: Cells receive perturbation tested, may receive perturbations. required choice high-MOI experiments (MOI > 1), since cells exclusively non-targeting gRNAs. choice, see sceptre documentation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/articles/perturbplanapp.html","id":"fdr-target-level","dir":"Articles","previous_headings":"Design parameters > Advanced settings","what":"FDR target level","title":"PerturbPlan App Documentation","text":"maximum tolerated expected proportion discovered associations false positives. FDR target level 0.1 common choice.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziang Niu. Author, maintainer. Yihui . Author. Eugene Katsevich. Author.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niu Z, Y, Katsevich E (2025). perturbplanapp: Perturb-seq Experimental Design. R package version 0.1.0, https://katsevich-lab.github.io/perturbplanapp.","code":"@Manual{,   title = {perturbplanapp: Perturb-seq Experimental Design},   author = {Ziang Niu and Yihui He and Eugene Katsevich},   year = {2025},   note = {R package version 0.1.0},   url = {https://katsevich-lab.github.io/perturbplanapp}, }"},{"path":"https://katsevich-lab.github.io/perturbplanapp/index.html","id":"perturbplan-app","dir":"","previous_headings":"","what":"Perturb-seq Experimental Design","title":"Perturb-seq Experimental Design","text":"PerturbPlan Shiny app Perturb-seq TAP-seq experimental design, helping balance power (expected proportion true perturbation-gene effects detected significant) cost (library preparation sequencing). 🚀 Launch App","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/index.html","id":"interface-overview","dir":"","previous_headings":"","what":"Interface overview","title":"Perturb-seq Experimental Design","text":"PerturbPlan structured around solving 11 commonly encountered design problems. workflow app follows: Select design problem: Choose one 11 predefined design problems best matches experimental goals. Configure design parameters: Set parameters experimental choices, analysis choices, expected effect sizes, (optionally) advanced settings. Click “Plan”. View analysis results: plot illustrates graphically design problem solved, table summarizes optimal design parameters. Explore parameter settings. Use sliders adjust key parameters see affect optimal design. Pin parameter settings compare multiple designs. Export results. Click export buttons download plot detailed Excel spreadsheet containing results. Start . Click “Restart” button start scratch. elaborate steps 1 2 full documentation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/CANONICAL_PARAMETER_NAMES.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonical Parameter Names by Layer — CANONICAL_PARAMETER_NAMES","title":"Canonical Parameter Names by Layer — CANONICAL_PARAMETER_NAMES","text":"Complete specification parameter names layer application architecture, preserving essential conversion logic.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/CANONICAL_PARAMETER_NAMES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonical Parameter Names by Layer — CANONICAL_PARAMETER_NAMES","text":"","code":"CANONICAL_PARAMETER_NAMES"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/CANONICAL_PARAMETER_NAMES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Canonical Parameter Names by Layer — CANONICAL_PARAMETER_NAMES","text":"List naming conventions parameter across layers","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/ESSENTIAL_CONVERSIONS.html","id":null,"dir":"Reference","previous_headings":"","what":"Essential Data Conversion Patterns — ESSENTIAL_CONVERSIONS","title":"Essential Data Conversion Patterns — ESSENTIAL_CONVERSIONS","text":"Conversion patterns MUST preserved naming unification. handle perturbplan API interface correctly.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/ESSENTIAL_CONVERSIONS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Essential Data Conversion Patterns — ESSENTIAL_CONVERSIONS","text":"","code":"ESSENTIAL_CONVERSIONS"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/ESSENTIAL_CONVERSIONS.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Essential Data Conversion Patterns — ESSENTIAL_CONVERSIONS","text":"List conversion patterns /column names","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/PARAMETER_DISPLAY_NAMES.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Control Matrix Display Names — PARAMETER_DISPLAY_NAMES","title":"Parameter Control Matrix Display Names — PARAMETER_DISPLAY_NAMES","text":"Standardized display names parameter control matrix component, ensuring consistent user-facing terminology.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/PARAMETER_DISPLAY_NAMES.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter Control Matrix Display Names — PARAMETER_DISPLAY_NAMES","text":"","code":"PARAMETER_DISPLAY_NAMES"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/PARAMETER_DISPLAY_NAMES.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Parameter Control Matrix Display Names — PARAMETER_DISPLAY_NAMES","text":"Named list mapping internal parameter names display names","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/cost-minimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Cost Minimization Analysis Functions — cost-minimization","title":"Cost Minimization Analysis Functions — cost-minimization","text":"Helper functions power-cost minimization workflow (Workflow 5) using cost_power_computation + find_optimal_cost_design integration.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_empty_solutions_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Empty Table — create_empty_solutions_table","title":"Create Empty Table — create_empty_solutions_table","text":"Create Empty Table","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_empty_solutions_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Empty Table — create_empty_solutions_table","text":"","code":"create_empty_solutions_table()"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_enhanced_solutions_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Solution Table Functions — create_enhanced_solutions_table","title":"Clean Solution Table Functions — create_enhanced_solutions_table","text":"Clean implementation solution table proper two-row header architecture simplified parameter extraction logic. Create Enhanced Solutions Table (Clean Implementation)","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_enhanced_solutions_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Solution Table Functions — create_enhanced_solutions_table","text":"","code":"create_enhanced_solutions_table(results)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_enhanced_solutions_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Solution Table Functions — create_enhanced_solutions_table","text":"results Analysis results object containing optimal_design, user_config, workflow_info","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/create_enhanced_solutions_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Solution Table Functions — create_enhanced_solutions_table","text":"Shiny UI tagList clean solution table","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/extract_cached_solutions_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Cached Solutions Data — extract_cached_solutions_data","title":"Extract Cached Solutions Data — extract_cached_solutions_data","text":"Handles cached_results format current pinned solutions","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/extract_cached_solutions_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Cached Solutions Data — extract_cached_solutions_data","text":"","code":"extract_cached_solutions_data(cached_results)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/extract_cached_solutions_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Cached Solutions Data — extract_cached_solutions_data","text":"cached_results Cached results mod_results_cache","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/extract_cached_solutions_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Cached Solutions Data — extract_cached_solutions_data","text":"List structured solutions data solutions","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/file_upload_zone.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a File Upload Zone — file_upload_zone","title":"Create a File Upload Zone — file_upload_zone","text":"Creates standardized file upload area info text proper styling using semantic CSS classes.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/file_upload_zone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a File Upload Zone — file_upload_zone","text":"","code":"file_upload_zone(   ns,   id,   label = NULL,   accept = NULL,   info_text = NULL,   placeholder = NULL )"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/file_upload_zone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a File Upload Zone — file_upload_zone","text":"ns Namespace function calling module id Input ID file input label File input label (optional, set NULL label) accept File types accept info_text Informational text file format placeholder Placeholder text file input","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/file_upload_zone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a File Upload Zone — file_upload_zone","text":"div file upload structure","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/file_upload_zone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a File Upload Zone — file_upload_zone","text":"","code":"if (FALSE) { # \\dontrun{ file_upload_zone(ns, \"pilot_data\",    accept = c(\".rds\", \".RDS\"),   info_text = \"Combined RDS file with baseline expression\",   placeholder = \"Choose reference expression data...\" ) } # }"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/naming_standards.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Naming Standards — naming_standards","title":"Variable Naming Standards — naming_standards","text":"Canonical naming conventions parameters across entire application architecture. enforces consistency UI inputs backend processing results display.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/parameter_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Parameter Control Matrix — parameter_matrix","title":"Create a Parameter Control Matrix — parameter_matrix","text":"Creates standardized parameter control matrix radio buttons Varying/Fixed/Minimizing states. Handles complex business logic parameter control constraint-driven workflows.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/parameter_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Parameter Control Matrix — parameter_matrix","text":"","code":"parameter_matrix(ns, parameters, workflow_info = NULL, disabled_params = c())"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/parameter_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Parameter Control Matrix — parameter_matrix","text":"ns Namespace function calling module parameters Named list parameters current states workflow_info Current workflow information business logic disabled_params Vector parameter names disabled","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/parameter_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Parameter Control Matrix — parameter_matrix","text":"div parameter matrix structure","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/parameter_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Parameter Control Matrix — parameter_matrix","text":"","code":"if (FALSE) { # \\dontrun{ parameter_matrix(ns,    list(cells_per_target = \"varying\", reads_per_cell = \"fixed\"),   workflow_info ) } # }"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/perturbplan-integration.html","id":null,"dir":"Reference","previous_headings":"","what":"Perturbplan Integration Functions — perturbplan-integration","title":"Perturbplan Integration Functions — perturbplan-integration","text":"Helper functions integrate UI configuration perturbplan package functions, specifically cost_power_computation power-workflows.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/pilot-data-validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Pilot Data Validation Functions — pilot-data-validation","title":"Pilot Data Validation Functions — pilot-data-validation","text":"Functions validating custom pilot data uploads expected structure perturbplan integration.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/run_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run the Shiny Application — run_app","title":"Run the Shiny Application — run_app","text":"Run Shiny Application","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/run_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run the Shiny Application — run_app","text":"","code":"run_app(   onStart = NULL,   options = list(),   enableBookmarking = NULL,   uiPattern = \"/\",   ... )"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/run_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run the Shiny Application — run_app","text":"onStart function called app actually run. needed shinyAppObj, since shinyAppDir case, global.R file can used purpose. options Named options passed runApp call (can following: \"port\", \"launch.browser\", \"host\", \"quiet\", \"display.mode\" \"test.mode\"). can also specify width height parameters provide hint embedding environment ideal height/width app. enableBookmarking Can one \"url\", \"server\", \"disable\". default value, NULL, respect setting previous calls  enableBookmarking(). See enableBookmarking() information bookmarking app. uiPattern regular expression applied GET request determine whether ui used handle request. Note entire request path must match regular expression order match considered successful. ... arguments pass golem_opts. See `?golem::get_golem_options` details.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/step_container.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Step Container — step_container","title":"Create a Step Container — step_container","text":"Creates standardized step container multi-step forms proper styling semantic structure.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/step_container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Step Container — step_container","text":"","code":"step_container(step_number, title, content, show_divider = TRUE)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/step_container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Step Container — step_container","text":"step_number Step number (e.g., 1, 2, 3) title Step title content Step content show_divider Whether show bottom divider (default: TRUE)","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/step_container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Step Container — step_container","text":"div step container structure","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/step_container.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Step Container — step_container","text":"","code":"if (FALSE) { # \\dontrun{ step_container(1, \"Optimization Constraints\",    selectInput(ns(\"opt_type\"), \"Type:\", choices = list(...)) ) } # }"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/tooltip-content.html","id":null,"dir":"Reference","previous_headings":"","what":"Tooltip Content Library — tooltip-content","title":"Tooltip Content Library — tooltip-content","text":"Centralized repository tooltip texts UI elements. Content extracted vignette first sentences consistency documentation.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/ui-tooltips.html","id":null,"dir":"Reference","previous_headings":"","what":"UI Tooltip Helper Functions — ui-tooltips","title":"UI Tooltip Helper Functions — ui-tooltips","text":"Reusable functions adding hover tooltips UI elements. Uses HTML title attribute (Option ) simple, accessible tooltips. Font Awesome 6 icons used visual indicators.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/ui_components.html","id":null,"dir":"Reference","previous_headings":"","what":"UI Component Library — ui_components","title":"UI Component Library — ui_components","text":"Reusable UI components use semantic CSS classes Phase 1 CSS Foundation (variables.css, layout.css, components.css)","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/unified-minimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Constrained Minimization Analysis Functions — unified-minimization","title":"Unified Constrained Minimization Analysis Functions — unified-minimization","text":"Unified implementation workflows 10-11 (TPM FC minimization) using cost_power_computation + find_optimal_cost_design consistent data handling.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/univariate-optimization.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Optimization Functions — univariate-optimization","title":"Univariate Optimization Functions — univariate-optimization","text":"Functions univariate optimization workflows (workflows 1-4, 6-9) optimize single parameter keeping others fixed.","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/use_google_analytics.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Google Analytics This function must be called from a Shiny app's UI. You can call use_google_analytics() from anywhere inside the UI, as long as the final app UI (HTML code) contains the result of use_google_analytics(). — use_google_analytics","title":"Configure Google Analytics This function must be called from a Shiny app's UI. You can call use_google_analytics() from anywhere inside the UI, as long as the final app UI (HTML code) contains the result of use_google_analytics(). — use_google_analytics","text":"Configure Google Analytics function must called Shiny app's UI. can call use_google_analytics() anywhere inside UI, long final app UI (HTML code) contains result use_google_analytics().","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/use_google_analytics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Google Analytics This function must be called from a Shiny app's UI. You can call use_google_analytics() from anywhere inside the UI, as long as the final app UI (HTML code) contains the result of use_google_analytics(). — use_google_analytics","text":"","code":"use_google_analytics(ga_id)"},{"path":"https://katsevich-lab.github.io/perturbplanapp/reference/use_google_analytics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Google Analytics This function must be called from a Shiny app's UI. You can call use_google_analytics() from anywhere inside the UI, as long as the final app UI (HTML code) contains the result of use_google_analytics(). — use_google_analytics","text":"ga_id Google Analytics Tag ID, something like \"G-ABCD12E34F\".","code":""},{"path":"https://katsevich-lab.github.io/perturbplanapp/news/index.html","id":"perturbplanapp-010","dir":"Changelog","previous_headings":"","what":"perturbplanApp 0.1.0","title":"perturbplanApp 0.1.0","text":"First stable version web app.","code":""}]
